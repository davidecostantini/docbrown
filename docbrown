#!/usr/bin/python
import sys

__aws_installed=False
__docker_installed=False

__alert_mail_host=""
__alert_mail_port=""
__alert_mail_ssl=False
__alert_mail_sender=""
__alert_mail_dest=""
__alert_mail_user=""
__alert_mail_pwd=""


class bcolors:
    HEADER = '\033[95m'
    OKCYAN = '\033[36m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def printMsg(kMsgCod,kMsgDesc,kQuit=False):
    import sys
    from socket import gethostname
    from datetime import datetime

    text = "[" + gethostname() + "] " + datetime.now().strftime('%d-%m-%Y %H:%M:%S') 
    if kMsgCod:
    	text = text + " [" + kMsgCod + "] " 
    text = text + " " + kMsgDesc

    if kMsgDesc[:4] == "--->":
        print bcolors.OKGREEN + text + bcolors.ENDC
    elif kMsgDesc[:4] == "###>":
        print bcolors.FAIL + text + bcolors.ENDC
    else:
        print bcolors.OKCYAN + text + bcolors.ENDC

    if kQuit:
        sys.exit(1)

def sendMail(kTitle,kMessage):
	global __alert_mail_host
	global __alert_mail_port
	global __alert_mail_ssl
	global __alert_mail_sender
	global __alert_mail_dest
	global __alert_mail_user
	global __alert_mail_pwd

	import sys
	import os
	import re

	from smtplib import SMTP_SSL       # this invokes the secure SMTP protocol (port 465, uses SSL)
	from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25, no encryption)
	from email.MIMEText import MIMEText

	try:
	    msg = MIMEText(kMessage, 'plain')
	    msg['Subject']= kTitle
	    msg['From']   = __alert_mail_sender

	    if __alert_mail_ssl:
	        conn = SMTP_SSL(__alert_mail_host)
	    else:
	        conn = SMTP(__alert_mail_host)

	    conn.set_debuglevel(False)
	    conn.login(__alert_mail_user, __alert_mail_pwd)
	    try:
	    	printMsg ("sendMail","Sending alert email")	
	        conn.sendmail(__alert_mail_sender, __alert_mail_dest, msg.as_string())
	        printMsg ("sendMail","--->OK")

	    finally:
	        conn.close()

	except ValueError as e:
		printMsg ("__checkFileExistence","###>"+str(e))	

def __checkFileExistence(kFileToCheck):
    import os
    try:
	    if (not os.path.isfile(kFileToCheck)):
	        printMsg ("","###>Oops! Config file missing -> " + kFileToCheck,True)
	        return False
	    return True

    except ValueError as e:
        printMsg ("__checkFileExistence","###>"+str(e),True)	    

def loadJsonFile(kFilePath):
    import json
    try:
        if __checkFileExistence(kFilePath):
            data = json.loads(open(kFilePath).read())
            return data

    except ValueError as e:
        printMsg ("loadJsonFile","###>"+str(e),True)

def checkInstallation():
	global __docker_installed
	global __aws_installed

	if __checkDocker():
		__docker_installed=True
	else:
		printMsg ("","###> Docker is not installed")
		
	if __checkAws():
		__aws_installed=True
	else:
		printMsg ("","###> AWS is not installed")

def __checkDocker():
	import subprocess
	printMsg("","Checking installation: DOCKER")
	p = subprocess.Popen(['which', 'docker'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = p.communicate()
	if out:
		printMsg("","--->OK")
		return True

def __checkAws():
	import subprocess
	printMsg("","Checking installation: AWS")
	p = subprocess.Popen(['which', 'aws'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = p.communicate()
	if out:
		printMsg("","--->OK")
		return True

def execCmd(kCmd):
	from subprocess import Popen
	try:
		args =[]
		for param in (kCmd.split()):
			args.append(param)

		# run cmd
		s = Popen(args)

		s.communicate()

		if s.returncode == 0:
			printMsg("","--->OK")
			return True

	except ValueError as e:
		printMsg ("execCmd","###>"+str(e),True)

def envVarHandling(kAws_region="",kAws_key="",kAws_secret=""):
	import os
	try:
		printMsg("","Setting ENV Variables")
		os.environ["AWS_DEFAULT_REGION"]  = kAws_region
		os.environ["AWS_ACCESS_KEY_ID"]  = kAws_key
		os.environ["AWS_SECRET_ACCESS_KEY"]  = kAws_secret
		printMsg("","--->OK")

	except ValueError as e:
		printMsg ("envVarHandling","###>"+str(e),True)		


def execTask(kConfig,kTask):
	global __docker_installed
	global __aws_installed	
	try:
		import subprocess
		import os

		S3Bucket=kTask["s3bucket"]
		Path=kTask["path"]
		S3Encrypt=kTask["s3_encrypt"]

		#Check if container was specified
		dockerContainer = (kTask["docker_container"] if 'docker_container' in kTask else "")
		if dockerContainer:
			if not __docker_installed:
				printMsg ("","###> You specified a Docker container but Docker is not installed",True)
			contDesc=" using Docker container => " + dockerContainer
		else:
			if not __aws_installed:
				printMsg ("","###> You specified AWS CLI but AWS CLI is not installed",True)			
			contDesc=" using AWS CLI"

		printMsg("","Backing up " + Path + " to " + S3Bucket + contDesc)
		Popen = subprocess.Popen

		var1 = "AWS_DEFAULT_REGION="+kConfig["aws_region"]
		var2 = "AWS_ACCESS_KEY_ID="+kConfig["aws_key"]
		var3 = "AWS_SECRET_ACCESS_KEY="+kConfig["aws_secret"]

		if dockerContainer:
			s = Popen(['docker', 'run', '-ti', '-v',os.getcwd()+':/etc/docbrown', '-v',Path+':'+Path, "-e",var1, "-e",var2, "-e",var3,dockerContainer, "s3", "sync", Path, S3Bucket ])
		else:
			s = Popen(['aws', 's3', 'sync', Path,S3Bucket])

		s.communicate()
		
		if s.returncode == 0:
			return False
		else:
			printMsg ("execTask","###>Issue when executing a command --> " + Path + " - " + S3Bucket,False)
			return "Issue when executing a command --> " + Path + " - " + S3Bucket + " - Return status:" + str(s.returncode)

	except ValueError as e:
		printMsg ("execScript","###>"+str(e),True)

def main(kArgs):
	global __alert_mail_host
	global __alert_mail_port
	global __alert_mail_ssl
	global __alert_mail_sender
	global __alert_mail_dest
	global __alert_mail_user
	global __alert_mail_pwd

	try:
		json = loadJsonFile(kArgs[0])

		aws_region = json["aws_region"]
		aws_key = json["aws_key"]
		aws_secret = json["aws_secret"]

		__alert_mail_host = json["alert_mail_host"]
		__alert_mail_port = json["alert_mail_port"]
		__alert_mail_ssl = json["alert_mail_ssl"]
		__alert_mail_sender = json["alert_mail_sender"]
		__alert_mail_dest = json["alert_mail_dest"]
		__alert_mail_user = json["alert_mail_user"]
		__alert_mail_pwd = json["alert_mail_pwd"]

		#Check installation AWS & Docker
		checkInstallation()

		#Set Env var
		envVarHandling(aws_region,aws_key,aws_secret)

		for task in json["tasks"]:
			error=False
			#Check PRE task command
			if task["pre_cmd_trigger"]:
				printMsg ("","Found PRE sync trigger, Executing " + task["pre_cmd_trigger"])
				error = not execCmd(task["pre_cmd_trigger"]) #If return true was successfully

			#Exec task
			if not error:
				error = execTask(json,task)
				if not error:
					printMsg ("","--->SYNC completed!")

			#Check POST task command
			if task["post_cmd_trigger"] and [not error]:
				printMsg ("","Found POST sync trigger, Executing " + task["post_cmd_trigger"])
				error = not execCmd(task["post_cmd_trigger"]) #If return true was successfully

		if error:
			printMsg ("","###>Task completed with error!")

			#If specified send alert email
			if __alert_mail_host and error:
				sendMail("DocBrown - ERROR", error)
		else:
			printMsg ("","--->Task done!")

	except ValueError as e:
		printMsg ("execScript","###>"+str(e),True)		

if __name__ == "__main__":
	if len(sys.argv) > 1: #Check that a config file path was passed as arg
		main(sys.argv[1:2])
	else:
		printMsg ("__main__","###>You must pass the config file as param",True)
